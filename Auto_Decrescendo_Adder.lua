-- Script generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()




GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Button.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end



GUI.name = "Auto Decrescendo Adder"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 640, 500
GUI.anchor, GUI.corner = "mouse", "C"

-- =============================================================== MY STUFF ==========================================================
-- =============== variables

local ENVELOPE
local MIDI_EDITOR
local MIDI_TAKE

-- ============== main

function main()
  
  -- check
  if not ENVELOPE or not MIDI_EDITOR or not MIDI_TAKE then 
  
    reaper.ShowMessageBox(
    "Failed to get envelope and midi take. \n\nMake sure they are selected, then press the 'Get Envelope' and \n'Get Midi' buttons :)", "Error",0)
    
    return
  end
  
  reaper.Undo_BeginBlock()
  
  -- get GUI values
  local noteLenThresh = tonumber(GUI.Val("Len_Thresh"))
  local baselineVolume = tonumber(GUI.Val("Base_Vol"))
  local decrDepth = tonumber(GUI.Val("Decr_Depth"))
  local startOffset = tonumber(GUI.Val("Start_Offset"))
  local tailEndLength = tonumber(GUI.Val("Tail_Length"))
  
  local readValuesAs = GUI.Val("Read_As")
  local fixedOrScaleDecr = GUI.Val("Decr_Type")
  local timeSelectOnly = GUI.Val("Extra_Options")[1]
  local clearExistingPoints = GUI.Val("Extra_Options")[2]
  
  
  -- clear envelope if thats what we want
  if clearExistingPoints then
    ClearEnvelope(ENVELOPE, timeSelectOnly)
  end
  
  -- make decrSlope always negative
  if fixedOrScaleDecr == 2 then
    if decrDepth > 0 then
      decrDepth = decrDepth * -1
    end
  end
  
  
  -- set parameters based on gui values
  local tailLength
  local offsetQN
  local offsetSec
  local threshold
  
  if readValuesAs == 1 then
    threshold = reaper.TimeMap2_QNToTime(0,noteLenThresh)
    
    offsetSec = reaper.TimeMap2_QNToTime(0,startOffset)
    offsetQN = startOffset
    
    tailLength = reaper.TimeMap2_QNToTime(0,tailEndLength)
    
  else
    threshold = noteLenThresh
    
    offsetSec = startOffset
    offsetQN = reaper.TimeMap2_timeToQN(0, startOffset)
    
    tailLength = tailEndLength
    
  end
  
  
  
  -- select notes we want to potentially add decrescendos to
  reaper.MIDIEditor_OnCommand(MIDI_EDITOR, 40214) -- unselect all
  if timeSelectOnly then
    reaper.MIDIEditor_OnCommand(MIDI_EDITOR, 40746) -- select all notes in time selection
  else
    reaper.MIDIEditor_OnCommand(MIDI_EDITOR, 40003) -- select all notes
  end
  
  
  -- count notes, create variables
  local _, notecnt, _, _ = reaper.MIDI_CountEvts(MIDI_TAKE)
  
  local sel, muted, startppqpos, endppqpos, chan, pitch, vel
  local qnStart, qnEnd, qnLength
  local secStart, secEnd, secLength
  local scaledBaseVol = reaper.DB2SLIDER(baselineVolume)
  local scaledDecrVol
  
  --loop through cc notes. if they're selected and long enough, add a decrescendo to the envelope.
  for i = 0, notecnt - 1 do
  
    -- get note
    _, sel, muted, startppqpos, endppqpos, chan, pitch, vel = reaper.MIDI_GetNote(MIDI_TAKE, i)
    
    -- get note start, end, and length in units of project quarter note (technically this could be inside the readValuesAs == 1 if statement)
    qnStart = reaper.MIDI_GetProjQNFromPPQPos(MIDI_TAKE, startppqpos)
    qnEnd = reaper.MIDI_GetProjQNFromPPQPos(MIDI_TAKE, endppqpos)
    qnLength = qnEnd - qnStart
    
    -- get note start, end, and length in seconds
    secStart = reaper.MIDI_GetProjTimeFromPPQPos(MIDI_TAKE, startppqpos)
    secEnd = reaper.MIDI_GetProjTimeFromPPQPos(MIDI_TAKE, endppqpos)
    secLength = secEnd - secStart
    
    -- if we want to scale the decrescendo based on note length
    if fixedOrScaleDecr == 2 then
      
      -- if we want to scale by QN or Seconds
      if readValuesAs == 1 then
        scaledDecrVol = reaper.DB2SLIDER(baselineVolume + (decrDepth* (qnEnd - (qnStart + offsetQN))))
      
      else
        scaledDecrVol = reaper.DB2SLIDER(baselineVolume + (decrDepth * (secEnd - (secStart + offsetSec))))
        
      end
    else
      
      scaledDecrVol = reaper.DB2SLIDER(baselineVolume + decrDepth)
      
    end
    
    
    --
    -- insert env points
    if sel and (secLength > threshold) then
      reaper.InsertEnvelopePoint(ENVELOPE, secStart + offsetSec, scaledBaseVol, 0, 0, true, true)
      reaper.InsertEnvelopePoint(ENVELOPE, secEnd, scaledDecrVol, 0, 0, true, true)
      reaper.InsertEnvelopePoint(ENVELOPE, secEnd + tailLength, scaledBaseVol, 0, 0, true, true)
    end
    --]
  end
  
  reaper.Envelope_SortPoints(ENVELOPE)
  
  reaper.Undo_EndBlock("Automatic envelope decrescendo adder", 0)
  --]]
  
end

-- ============= helpers

function GetEnvelope()

  
  ENVELOPE = reaper.GetSelectedEnvelope(0)
  
  if not ENVELOPE then
    reaper.ShowMessageBox("Failed to get selected envelope. make sure one is selected.", "Error", 0)
    return
  end
  
  local _, envName = reaper.GetEnvelopeName(ENVELOPE)
  local track= reaper.Envelope_GetParentTrack(ENVELOPE)
  local _, trackName = reaper.GetTrackName(track)
   
  GUI.Val("Envelope", trackName .. " " .. envName)
  
end

function GetMidiTake()
  
  MIDI_EDITOR = reaper.MIDIEditor_GetActive()
  
  if not MIDI_EDITOR then
    reaper.ShowMessageBox("Failed to get active midi editor. Make sure one is open.", "Error", 0)
    return
  end
  
  MIDI_TAKE = reaper.MIDIEditor_GetTake(MIDI_EDITOR)
  
  if not MIDI_TAKE then
    reaper.ShowMessageBox("Failed to get active midi take. Make sure one is open.", "Error", 0)
    return
  end
  
  -- get info so we can display it nicely
  local takeName = reaper.GetTakeName(MIDI_TAKE)
  local takeNumber = reaper.GetMediaItemTakeInfo_Value(MIDI_TAKE, "IP_TAKENUMBER")
  local trackPtr = reaper.GetMediaItemTakeInfo_Value(MIDI_TAKE, "P_TRACK")
  local _, trackName = reaper.GetTrackName(trackPtr)
  
  if string.len(takeName) > 18 then
      takeName = string.sub(takeName, 0, 18) .. ("...")
    end
  
  GUI.Val("Midi_Take", trackName .. " " .. takeName .. " take " .. math.floor(takeNumber + 1))
  
end

function ClearEnvelope(envelope, timeSelection)
  
  if timeSelection then
    reaper.Main_OnCommand(40089,0)  -- delete all points in time selection
  else
    reaper.Main_OnCommand(40332,0) -- select all points
    reaper.Main_OnCommand(40333,0) -- delete all selected points
  end
  
end

-- =============================================================== GUI ===============================================================


GUI.New("Envelope", "Textbox", {
    z = 11,
    x = 64,
    y = 64,
    w = 320,
    h = 20,
    caption = "Envelope",
    cap_pos = "top",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Get_Env", "Button", {
    z = 11,
    x = 416,
    y = 64,
    w = 78,
    h = 24,
    caption = "Get Envelope",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = GetEnvelope
})

GUI.New("Midi_Take", "Textbox", {
    z = 11,
    x = 64,
    y = 112,
    w = 320,
    h = 20,
    caption = "Midi Take",
    cap_pos = "top",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Get_Midi", "Button", {
    z = 11,
    x = 416,
    y = 112,
    w = 78,
    h = 24,
    caption = "Get Midi",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = GetMidiTake
})

GUI.New("Len_Thresh", "Textbox", {
    z = 11,
    x = 192,
    y = 176,
    w = 96,
    h = 20,
    caption = "Note Length Threshold: ",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Base_Vol", "Textbox", {
    z = 11,
    x = 160,
    y = 224,
    w = 96,
    h = 20,
    caption = "Baseline Volume: ",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Decr_Depth", "Textbox", {
    z = 11,
    x = 164,
    y = 272,
    w = 96,
    h = 20,
    caption = "Decrescendo Depth",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Start_Offset", "Textbox", {
    z = 11,
    x = 128,
    y = 320,
    w = 96,
    h = 20,
    caption = "Start Offset",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Tail_Length", "Textbox", {
    z = 11,
    x = 112,
    y = 368,
    w = 96,
    h = 20,
    caption = "Tail Length",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

GUI.New("Read_As", "Radio", {
    z = 11,
    x = 336,
    y = 176,
    w = 96,
    h = 96,
    caption = "Read Values as:",
    optarray = {"Quarter note", "Seconds"},
    dir = "v",
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = false,
    shadow = true,
    swap = nil,
    opt_size = 20
})

GUI.New("Decr_Type", "Radio", {
    z = 11,
    x = 336,
    y = 256,
    w = 96,
    h = 64,
    caption = "Decrescendo Type",
    optarray = {"Fixed", "Scaled to Note Length"},
    dir = "v",
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = false,
    shadow = true,
    swap = nil,
    opt_size = 20
})

GUI.New("Extra_Options", "Checklist", {
    z = 11,
    x = 336,
    y = 336,
    w = 96,
    h = 64,
    caption = "Extra Options",
    optarray = {"Time Selection Only", "Clear Existing Points"},
    dir = "v",
    pad = 4,
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = false,
    shadow = true,
    swap = nil,
    opt_size = 20
})

GUI.New("Go", "Button", {
    z = 11,
    x = 75,
    y = 420,
    w = 450,
    h = 48,
    caption = "BUST THE SMASH",
    font = 3,
    col_txt = "txt",
    col_fill = "green",
    func = main
})

-- set gui defaults:
GUI.Val("Len_Thresh", 0.5)
GUI.Val("Base_Vol", 0.0)
GUI.Val("Decr_Depth", -14)
GUI.Val("Start_Offset", 0.25)
GUI.Val("Tail_Length", 0.05)
GUI.Val("Extra_Options", {true, true})

-- start
GUI.Init()
GUI.Main()
